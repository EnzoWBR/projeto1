<template>
  <div class="app-container">
    <!-- Menu Lateral -->
    <aside class="sidebar" :class="{ 'menu-visible': menuVisible }" @mouseover="showMenu" @mouseleave="hideMenu">
      <ul>
        <li class="active">Escolas</li>
        <li>Alunos</li>
        <li>Organização</li>
      </ul>
    </aside>

    <!-- Conteúdo Principal -->
    <main class="main-content">
      <h1>Gerenciador de Escolas</h1>

      <!-- Formulário para adicionar ou editar escola -->
      <form @submit.prevent="saveEscola" class="form">
        <div class="form-group">
          <label for="nome">Nome</label>
          <input id="nome" type="text" v-model="escola.nome" placeholder="Digite aqui o seu nome" required />
        </div>
        <div class="form-group">
          <label for="endereco">Endereço</label>
          <input id="endereco" type="text" v-model="escola.endereco" placeholder="Digite aqui o endereço" required />
        </div>
        <div class="form-group">
          <label for="cep">CEP</label>
          <input id="cep" type="text" v-model="escola.cep" placeholder="Digite aqui o CEP" required />
        </div>
        <div class="form-group">
          <label for="telefone">Telefone</label>
          <input id="telefone" type="text" v-model="escola.telefone" placeholder="Digite aqui o Telefone" required />
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input id="email" type="email" v-model="escola.email" placeholder="Digite aqui o email" required />
        </div>
        <button type="submit" class="btn btn-primary">{{ editando ? 'Atualizar' : 'Adicionar' }} Escola</button>
      </form>

      <!-- Listagem das escolas -->
      <table class="table">
        <thead>
          <tr>
            <th>Nome</th>
            <th>Endereço</th>
            <th>CEP</th>
            <th>Telefone</th>
            <th>Email</th>
            <th>Ações</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="(escola, index) in escolas" :key="escola.id">
            <td class="highlight">{{ escola.nome }}</td>
            <td class="highlight">{{ escola.endereco }}</td>
            <td class="highlight">{{ escola.cep }}</td>
            <td>{{ escola.telefone }}</td>
            <td>{{ escola.email }}</td>
            <td>
              <button class="btn btn-edit" @click="editarEscola(index)">Editar</button>
              <button class="btn btn-delete" @click="removerEscola(index)">Excluir</button>
            </td>
          </tr>
        </tbody>
      </table>
    </main>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      escolas: [], // Lista de escolas
      escola: { nome: '', endereco: '', cep: '', telefone: '', email: '' }, // Escola atual para adicionar ou editar
      editando: false,
      indiceEdicao: null,
      menuVisible: false
    };
  },
  methods: {
    async fetchEscolas() {
      try {
        const response = await axios.get('http://localhost:3333/escolas');
        this.escolas = response.data.escolas || [];
      } catch (error) {
        console.error('Erro ao buscar escolas:', error);
      }
    },
    async saveEscola() {
      try {
        if (this.editando) {
          // Atualiza a escola existente
          await axios.put(`http://localhost:3333/escolas/${this.escola.id}`, this.escola);
          this.editando = false;
        } else {
          // Adiciona nova escola
          await axios.post('http://localhost:3333/escolas', this.escola);
        }
        // Recarrega a lista de escolas
        await this.fetchEscolas();
        // Limpa o formulário
        this.escola = { nome: '', endereco: '', cep: '', telefone: '', email: '' };
      } catch (error) {
        console.error('Erro ao salvar a escola:', error);
      }
    },
    editarEscola(index) {
      this.escola = { ...this.escolas[index] };
      this.editando = true;
      this.indiceEdicao = index;
    },
    async removerEscola(index) {
      try {
        await axios.delete(`http://localhost:3333/escolas/${this.escolas[index].id}`);
        this.escolas.splice(index, 1);
      } catch (error) {
        console.error('Erro ao remover a escola:', error);
      }
    },
    showMenu() {
      this.menuVisible = true;
    },
    hideMenu() {
      this.menuVisible = false;
    }
  },
  async created() {
    await this.fetchEscolas();
  }
};
</script>

<style scoped>
/* Layout Principal */
.app-container {
  display: flex;
  font-family: 'Arial', sans-serif;
}

/* Menu Lateral */
.sidebar {
  width: 175px;
  background-color: #007bff;
  padding: 20px;
  color: white;
  height: 100vh;
  position: fixed;
  left: 0;
  top: 0;
  transform: translateX(-200px); /* Inicialmente escondido */
  transition: transform 0.3s ease;
}

.sidebar.menu-visible {
  transform: translateX(0); /* Mostra o menu quando o mouse está sobre ele */
}

/* Estilos do Menu Lateral */
.sidebar ul {
  list-style: none;
  padding: 0;
}

.sidebar li {
  margin: 10px 0;
  padding: 10px;
  cursor: pointer;
  font-weight: bold;
  border-radius: 4px;
}

.sidebar li.active,
.sidebar li:hover {
  background-color: #0056b3;
}

/* Conteúdo Principal */
.main-content {
  margin-left: 200px; /* Espaço para o menu lateral */
  padding: 20px;
  background-color: #f9f9f9;
  flex-grow: 1;
}

/* Título */
h1 {
  font-size: 24px;
  color: #333;
  margin-bottom: 20px;
  text-align: center;
}

/* Formulário */
.form {
  display: flex;
  flex-direction: column;
  gap: 15px;
  margin-bottom: 20px;
}

.form-group {
  display: flex;
  flex-direction: column;
}

label {
  font-weight: bold;
  margin-bottom: 5px;
}

input {
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
  transition: border-color 0.3s;
}

input:focus {
  border-color: #007bff;
}

/* Botões */
.btn {
  color: white;
  border: none;
  border-radius: 4px;
  padding: 10px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s;
  margin-top: 10px;
}

.btn-primary {
  background-color: #007bff;
}

.btn-primary:hover {
  background-color: #0056b3;
}

.btn-edit {
  background-color: #28a745;
  margin-right: 5px;
}

.btn-edit:hover {
  background-color: #218838;
}

.btn-delete {
  background-color: #dc3545;
}

.btn-delete:hover {
  background-color: #c82333;
}

/* Tabela */
.table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

th, td {
  border: 1px solid #ddd;
  padding: 10px;
  text-align: left;
}

th {
  background-color: #f8f9fa;
  color: #333;
}

.highlight {
  background-color: #e9f7fe;
  color: #007bff;
  font-weight: bold;
}

/* Responsividade */
@media (max-width: 600px) {
  .sidebar {
    width: 100%;
    height: auto;
    transform: translateX(0); /* Mostra o menu lateral em dispositivos pequenos */
  }

  .main-content {
    margin-left: 0; /* Ajusta o conteúdo principal */
  }

  /* Mostra o menu apenas ao interagir com ele no mobile */
  .sidebar {
    display: block;
    transform: translateX(-100%);
    transition: transform 0.3s ease;
  }

  .sidebar.menu-visible {
    transform: translateX(0);
  }

  .app-container:hover .sidebar {
    transform: translateX(0);
  }
}
</style>
